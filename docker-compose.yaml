services:
  bot_db:
    image: postgres:16-alpine3.20
    container_name: bot_db
    environment:
      - "POSTGRES_USER=${DB_USER}"
      - "POSTGRES_PASSWORD=${DB_PASS}"
      - "POSTGRES_DB=${DB_NAME}"
    ports:
      - '5433:5432'
    restart: always
    volumes:
      - ./bot_db/:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10

  app:
    build:
      context: backend
    container_name: tracking_app
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      bot_db:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  telegram_bot:
    container_name: Tracking
    build:
      context: frontend
    environment:
      - BOT_TOKEN=${TOKEN}
    env_file:
      - ./.env
    ports:
      - "443:443"
    restart: always
    depends_on:
      app:
        condition: service_healthy
      bot_db:
        condition: service_healthy
    networks:
      - app_network

networks:
  app_network:
    driver: bridge
